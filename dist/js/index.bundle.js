"use strict";
(self["webpackChunkahly_site"] = self["webpackChunkahly_site"] || []).push([["index"],{

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _css_style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/style.css */ "./src/css/style.css");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


document.querySelectorAll(".bottom-nav.has-list").forEach(function (item) {
  item.addEventListener("click", function (_ref) {
    var target = _ref.target,
        parentElement = _ref.parentElement;
    var ele = target; // let ele = e.target;
    // if(ele.getAttribute('type') === "button"){
    //     ele = e.target.parentElement;

    if (ele.getAttribute("type") === "button") {
      ele = parentElement;
    }

    document.querySelectorAll(".bottom-nav.has-list").forEach(function (el) {
      if (el !== ele) {
        el.classList.remove("open");
        el.querySelector(".bottom-nav__sublist-wrapper").classList.remove("open");
      }
    });
    ele.classList.toggle("open");
    ele.querySelector(".bottom-nav__sublist-wrapper").classList.toggle("open"); // if(ele.classList.contains("open")){
    // }else{
    //     ele.classList.add("open");
    //     ele.querySelector(".bottom-nav__sublist-wrapper").classList.add("open");
    // }
  });
}); // const slide_news_btns = document.querySelector(".slide-button");
// let news_btns_array =
// Array.from(slide_news_btns.querySelector("button")).for

var news = document.querySelector("#slides-section");
var slides = news.getElementsByClassName("slide");

for (var i = 0; i < slides.length; i++) {
  slides[i].addEventListener("click", function () {
    // console.log(activeImages)
    var activeImages = news.querySelector(".active-image"); // if (activeImages.length > 0){

    if (activeImages) {
      activeImages.classList.remove("active-image"); // activeImages[0].classList.remove('active-image')
    }

    var active_image = slides[i].querySelector("img");
    var active_date = slides[i].querySelector(".thumbnail-date");
    var active_link = slides[i].querySelector(".thumbnail__link");
    var active_txt = active_link.querySelector(".thumnail__title");
    var feaured_slide = news.querySelector("#featrued-slide");
    var feaured_image = feaured_slide.querySelector(".featured-image");
    var feaured_date = feaured_slide.querySelector(".slide-date");
    var feaured_link = feaured_slide.querySelector(".slide-link");
    var feaured_txt = feaured_link.querySelector(".slide-text");
    active_image.classList.add("active-image");
    feaured_image.src = active_image.src;
    feaured_date.innerHTML = active_date.innerHTML;
    feaured_link.innerHTML.href = active_link.innerHTML.href;
    feaured_txt.innerHTML = active_txt.innerHTML;
  });
}

var buttonRight = news.querySelector(".slide-button__next");
var buttonLeft = news.querySelector(".slide-button__prev");
buttonLeft.addEventListener("click", function () {
  news.querySelector(".slider-wrapper__slides").scrollLeft -= 180;
});
buttonRight.addEventListener("click", function () {
  news.querySelector(".slider-wrapper__slides").scrollLeft += 180;
});
var players_list = document.querySelector(".players-list");
var players = players_list.querySelectorAll(".player-item");
var player_size = players[0].clientWidth;
var unit = player_size / 14;
var constant = unit * 2;
var tx = -constant; // players_list.style.transform = "translateX(" + tx + ")px";
// players_list.style.transform = "translateX(" + (-player_size *  4) + ")px";
// players[4].style.transform = "translateX(" + ((players_list.clientWidth / 2) - (player_size / 2)) + ")px";

var sliderWrapper = document.querySelector(".slides-container");
var slider = document.querySelector(".players-list");
var cloneWidht;
var sliderWidth;
var clones = [];
var disableScroll = false;
var scrollPos;

var items = _toConsumableArray(document.querySelectorAll(".player-item"));

var startfragment = document.createDocumentFragment();
var lastfragment = document.createDocumentFragment();

for (var index = 0; index < items.length; index++) {
  if (index === 0 || index === 1 || index === 2) {
    var clone = items[index].cloneNode(true);
    clone.classList.remove("active-player");
    clone.classList.add("clone");
    lastfragment.appendChild(clone);
  } else if (index === items.length - 1 || index === items.length - 2 || index === items.length - 3) {
    var _clone = items[index].cloneNode(true);

    _clone.classList.remove("active-player");

    _clone.classList.add("clone");

    startfragment.appendChild(_clone);
  }
}

slider.appendChild(lastfragment);
slider.prepend(startfragment); // items.forEach(item => {
//     let clone = item.cloneNode(true);
//     clone.classList.add("clone");
//     fragment.appendChild(clone);
//     clones.push(clone);
// });
// slider.appendChild(fragment);
// function getClonesWidth(){
//     let width =0;
//     clones.forEach(clone => {
//         width += clone.offsetWidth;
//     });
//     return width;
// }

var itemss = document.querySelectorAll(".player-item");
var item_sizee = items[0].clientWidth;

function scrollToActivePlayer(item_class) {
  var items = _toConsumableArray(document.querySelectorAll(item_class));

  var activeItem = document.querySelector(".active-player");
  var index = items.indexOf(activeItem);
  var item_size = activeItem.clientWidth;
  var con = document.querySelector(".slides-container"); // return [((index * item_size) - (con.clientWidth / 2) + (item_size / 2)), activeItem]

  return [index * item_size - con.clientWidth / 2 + item_size * 0.5, activeItem];
}

document.querySelector(".slides-container").scrollTo({
  top: 0,
  left: scrollToActivePlayer(".player-item")[0],
  behavior: "smooth"
});
var featuredPlayer = document.querySelector("#featured-player");

var translateTo = function translateTo(e, right, container_class, item_class) {
  var container = document.querySelector(container_class);

  var items = _toConsumableArray(document.querySelectorAll(item_class));

  var output = scrollToActivePlayer(item_class);
  var activeItem = output[1];
  var item_size = activeItem.clientWidth;
  var index = items.indexOf(activeItem);
  e.preventDefault();

  if (right) {
    if (index >= items.length - 4) {
      items[items.length - 4].classList.remove("active-player");
      items[items.length - 3].classList.remove("active-player");
      items[items.length - 2].classList.remove("active-player");
      items[3].classList.add("active-player");
      container.scrollTo({
        top: 0,
        left: scrollToActivePlayer(item_class)[0],
        behavior: "auto"
      });
    } else {
      container.scrollTo({
        top: 0,
        left: index * item_size - container.clientWidth / 2 + item_size * 1.5,
        behavior: "smooth"
      });
      activeItem.classList.remove("active-player");
      items[index + 1].classList.add("active-player"); // activeItem.nextElementSibling.classList.add("active-player");
    }
  } else {
    if (index <= 3) {
      items[4].classList.remove("active-player");
      items[3].classList.remove("active-player");
      items[2].classList.remove("active-player");
      items[items.length - 4].classList.add("active-player");
      container.scrollTo({
        top: 0,
        left: scrollToActivePlayer(item_class)[0],
        behavior: "auto"
      });
    } else {
      container.scrollTo({
        top: 0,
        left: index * item_size - container.clientWidth / 2 - item_size * 0.5,
        behavior: "smooth"
      });
      activeItem.classList.remove("active-player");
      items[index - 1].classList.add("active-player");
    }
  }

  featuredPlayer.querySelector(".featured-player__link").src = container.querySelector(".active-player .player__link").src;
  featuredPlayer.querySelector(".featured-player__name").innerHTML = container.querySelector(".active-player .player__name").innerHTML;
  featuredPlayer.querySelector(".featured-player__position").innerHTML = container.querySelector(".active-player .player__position").innerHTML;
};

document.querySelector("#slide-players-next").addEventListener("click", function (e) {
  return translateTo(e, true, ".slides-container", ".player-item");
});
document.querySelector("#slide-players-prev").addEventListener("click", function (e) {
  return translateTo(e, false, ".slides-container", ".player-item");
});
var playersContainer = document.querySelector(".slides-container");
var initailPosition = null;
var differ = null;
var moving = false;
var way = false;
var currentPos = null;
playersContainer.addEventListener("touchstart", function (e) {
  return initailPosition = e.touches[0].clientX;
});
playersContainer.addEventListener("touchmove", function (e) {
  e.preventDefault();
  currentPos = e.touches[0].clientX;
  differ = currentPos - initailPosition;
  playersContainer.scrollBy({
    top: 0,
    left: -differ,
    behavior: "smooth"
  });
});
playersContainer.addEventListener("touchend", function (e) {
  e.preventDefault();
  way = differ > 0 ? false : true;
  translateTo(e, way, ".slides-container", ".player-item");
});
playersContainer.addEventListener("mousedown", function (e) {
  initailPosition = e.clientX;
  moving = true;
});
playersContainer.addEventListener("mousemove", function (e) {
  if (moving) {
    e.preventDefault();
    currentPos = e.clientX;
    differ = currentPos - initailPosition;
    playersContainer.scrollBy({
      top: 0,
      left: -differ,
      behavior: "smooth"
    });
  }
});
playersContainer.addEventListener("mouseup", function (e) {
  e.preventDefault();
  moving = false;
  way = differ > 0 ? false : true;
  translateTo(e, way, ".slides-container", ".player-item");
});

/***/ }),

/***/ "./src/css/style.css":
/*!***************************!*\
  !*** ./src/css/style.css ***!
  \***************************/
/***/ ((module) => {

module.exports = "data:text/css;base64,Ly8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luCmV4cG9ydCB7fTs=";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/js/index.js"));
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,